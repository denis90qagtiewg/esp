--Settings--
local ESP = {
	Enabled = false,
	Boxes = true,
	BoxShift = CFrame.new(0,-1.5,0),
	BoxSize = Vector3.new(4,6,0),
	Color = Color3.new(1, 1, 1),
	FaceCamera = false,
	Names = true,
	Distance = true,
	Health = true,
	HealthBar = true,
	LookAngle = true,
	Tracers = true,
	ProximityArrows = true,
	TeamColor = true,
	Thickness = 2,
	AttachShift = 1,
	TeamMates = true,
	Players = true,
	
	ProximityMaxDistance = 250,

	Objects = setmetatable({}, {__mode="kv"}),
	Overrides = {}
}

--Declarations--
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local mouse = plr:GetMouse()


local V3new = Vector3.new
local WorldToViewportPoint = cam.WorldToViewportPoint

--Functions--
local function Draw(obj, props)
	local new = Drawing.new(obj)

	props = props or {}
	for i,v in pairs(props) do
		new[i] = v
	end
	return new
end

function ESP:GetTeam(p)
	local ov = self.Overrides.GetTeam
	if ov then
		return ov(p)
	end

	return p and p.Team
end

function ESP:IsTeamMate(p)
	local ov = self.Overrides.IsTeamMate
	if ov then
		return ov(p)
	end

	return self:GetTeam(p) == self:GetTeam(plr)
end

function ESP:GetColor(obj)
	local ov = self.Overrides.GetColor
	if ov then
		return ov(obj)
	end
	local p = self:GetPlrFromChar(obj)
	return p and self.TeamColor and p.Team and p.Team.TeamColor.Color or self.Color
end

function ESP:GetPlrFromChar(char)
	local ov = self.Overrides.GetPlrFromChar
	if ov then
		return ov(char)
	end

	return plrs:GetPlayerFromCharacter(char)
end

function ESP:Toggle(bool)
	self.Enabled = bool
	if not bool then
		for i,v in pairs(self.Objects) do
			if v.Type == "Box" then --fov circle etc
				if v.Temporary then
					v:Remove()
				else
					for i,v in pairs(v.Components) do
						v.Visible = false
					end
				end
			end
		end
	end
end

function ESP:GetBox(obj)
	return self.Objects[obj]
end

function ESP:AddObjectListener(parent, options)
	local function NewListener(c)
		if type(options.Type) == "string" and c:IsA(options.Type) or options.Type == nil then
			if type(options.Name) == "string" and c.Name == options.Name or options.Name == nil then
				if not options.Validator or options.Validator(c) then
					local box = ESP:Add(c, {
						PrimaryPart = type(options.PrimaryPart) == "string" and c:WaitForChild(options.PrimaryPart) or type(options.PrimaryPart) == "function" and options.PrimaryPart(c),
						Color = type(options.Color) == "function" and options.Color(c) or options.Color,
						ColorDynamic = options.ColorDynamic,
						Name = type(options.CustomName) == "function" and options.CustomName(c) or options.CustomName,
						IsEnabled = options.IsEnabled,
						RenderInNil = options.RenderInNil
					})
					--TODO: add a better way of passing options
					if options.OnAdded then
						coroutine.wrap(options.OnAdded)(box)
					end
				end
			end
		end
	end

	if options.Recursive then
		parent.DescendantAdded:Connect(NewListener)
		for i,v in pairs(parent:GetDescendants()) do
			coroutine.wrap(NewListener)(v)
		end
	else
		parent.ChildAdded:Connect(NewListener)
		for i,v in pairs(parent:GetChildren()) do
			coroutine.wrap(NewListener)(v)
		end
	end
end

local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
	ESP.Objects[self.Object] = nil
	for i,v in pairs(self.Components) do
		v.Visible = false
		v:Remove()
		self.Components[i] = nil
	end
end

local scalarPointAX, scalarPointAY
local scalarPointBX, scalarPointBY

scalarPointAX, scalarPointAY = 20, 20
scalarPointBX, scalarPointBY = -20, -20

local function rotateVector(vector, radians)
	local x, y = vector.X, vector.Y
	local c, s = math.cos(radians), math.sin(radians)
	return Vector2.new(x*c - y*s, x*s + y*c)
end

function boxBase:Update()
	if not self.PrimaryPart then
		--warn("not supposed to print", self.Object)
		return self:Remove()
	end

	local color
	if ESP.Highlighted == self.Object then
		color = ESP.HighlightColor
	else
		color = self.Color or self.ColorDynamic and self:ColorDynamic() or ESP:GetColor(self.Object) or ESP.Color
	end

	local allow = true
	if ESP.Overrides.UpdateAllow and not ESP.Overrides.UpdateAllow(self) then
		allow = false
	end
	if self.Player and not ESP.TeamMates and ESP:IsTeamMate(self.Player) then
		allow = false
	end
	if self.Player and not ESP.Players then
		allow = false
	end
	if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or type(self.IsEnabled) == "function" and not self:IsEnabled()) then
		allow = false
	end
	if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then
		allow = false
	end

	if not allow then
		for i,v in pairs(self.Components) do
			v.Visible = false
		end
		return
	end

	if ESP.Highlighted == self.Object then
		color = ESP.HighlightColor
	end

	--calculations--
	local char = self.PrimaryPart.Parent
	local hum = char.Humanoid
	local humRp = char:FindFirstChild("HumanoidRootPart")
	local head = char:FindFirstChild("Head")
	
	local headOff = Vector3.new(0, 0.5, 0)
	local legOff = Vector3.new(0, 3, 0)
	
	local RootPosition = WorldToViewportPoint(cam, humRp.Position)
	local HeadPosition = WorldToViewportPoint(cam, head.Position + headOff)
	local LegPosition = WorldToViewportPoint(cam, humRp.Position - legOff)
	
	local size1 = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
	local position1 = Vector2.new(RootPosition.X - size1.X / 2, RootPosition.Y - size1.Y / 2)

	local eplr = plrs:GetPlayerFromCharacter(char)

	local cf = self.PrimaryPart.CFrame
	if ESP.FaceCamera then
		cf = CFrame.new(cf.p, cam.CFrame.p)
	end
	local size = self.Size
	local locs = {
		TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,size.Y/2,0),
		TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,size.Y/2,0),
		BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,-size.Y/2,0),
		BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,-size.Y/2,0),
		TagPos = cf * ESP.BoxShift * CFrame.new(0,size.Y/2,0),
		Torso = cf
	}
	
	local boxesOutline = self.Components.BoxesOutline
	local boxes = self.Components.Box

	if ESP.Boxes then
		local a, OnScreen = WorldToViewportPoint(cam, humRp.Position)

		if boxes then
			boxesOutline.Color = ESP.Color
			boxes.Color = ESP.Color
			if OnScreen then
				boxesOutline.Size = size1
				boxesOutline.Position = position1
				boxesOutline.Visible = true
				
				boxes.Size = size1
				boxes.Position = position1
				boxes.Visible = true
			else
				boxesOutline.Visible = false
				boxes.Visible = false
			end
		end
	else
		boxesOutline.Visible = false
		boxes.Visible = false
	end

	if ESP.Names then
		local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.p)

		if Vis5 then
			self.Components.Name.Visible = true
			self.Components.Name.Position = Vector2.new(TagPos.X, TagPos.Y + -14)
			self.Components.Name.Text = self.Name
			self.Components.Name.Color = ESP.Color
		else
			self.Components.Name.Visible = false
		end
	else
		self.Components.Name.Visible = false
	end

	if ESP.Distance then
		local TagPos, VisA = WorldToViewportPoint(cam, locs.TagPos.p)
		
		local actualDis = math.floor((cam.CFrame.Position - cf.Position).Magnitude) / 3
		local actualdis2 = math.modf(actualDis)
		
		if VisA then
			self.Components.Distance.Visible = true
			self.Components.Distance.Position = Vector2.new(TagPos.X, TagPos.Y + -28)
			self.Components.Distance.Text = actualdis2.."m away"
			self.Components.Distance.Color = ESP.Color
		else
			self.Components.Distance.Visible = false
		end
	else
		self.Components.Distance.Visible = false
	end

	if ESP.Health then
		local TagPos, VisB = WorldToViewportPoint(cam, locs.TagPos.p)

		if VisB then
			local health = math.ceil(hum.Health)
			
			self.Components.Health.Visible = true
			self.Components.Health.Position = Vector2.new(TagPos.X, TagPos.Y + -42)
			self.Components.Health.Text = health.."/"..hum.MaxHealth
			self.Components.Health.Color = ESP.Color
		else
			self.Components.Health.Visible = false
		end
	else
		self.Components.Health.Visible = false
	end

	if ESP.Tracers then
		local TorsoPos, OnScreen = WorldToViewportPoint(cam, humRp.Position)

		if OnScreen then
			self.Components.Tracer.Visible = true
			self.Components.Tracer.From = Vector2.new(TorsoPos.X, TorsoPos.Y)
			self.Components.Tracer.To = Vector2.new(cam.ViewportSize.X/2,cam.ViewportSize.Y/ESP.AttachShift)
			self.Components.Tracer.Color = ESP.Color
		else
			self.Components.Tracer.Visible = false
		end
	else
		self.Components.Tracer.Visible = false
	end
	
	local HealthBarOutline = self.Components.HealthBarOutline
	local HealthBarAc = self.Components.HealthBar
	
	if ESP.HealthBar then
		local TorsoPos, OnScreen = WorldToViewportPoint(cam, humRp.Position)

		if OnScreen then
			HealthBarOutline.Size = Vector2.new(2, (HeadPosition.Y - LegPosition.Y))
			HealthBarOutline.Position = position1 - Vector2.new(6, 0)
			HealthBarOutline.Visible = true
			
			HealthBarAc.Size = Vector2.new(2, (HeadPosition.Y - LegPosition.Y) / (hum.MaxHealth / math.clamp(hum.Health, 0, hum.MaxHealth)))
			HealthBarAc.Position = Vector2.new(position1.X - 6, position1.Y + (1/HealthBarAc.Size.Y))
			HealthBarAc.Visible = true
		else
			HealthBarOutline.Visible = false
			HealthBarAc.Visible = false
		end
	else
		HealthBarOutline.Visible = false
		HealthBarAc.Visible = false
	end
	
	local LookAngleLine = self.Components.LookAngle
	
	if ESP.LookAngle then
		local rayhit, hitpos = workspace:FindPartOnRayWithIgnoreList(Ray.new(head.Position, head.CFrame.LookVector * 5), {cam, char}, false, true, "")
		local vpHit, OnScreen = cam:WorldToViewportPoint(hitpos)
		local headpos = cam:WorldToViewportPoint(head.Position)
		
		LookAngleLine.Color = ESP.Color
		
		if OnScreen then	
			LookAngleLine.From = Vector2.new(headpos.X, headpos.Y)
			LookAngleLine.To = Vector2.new(vpHit.X, vpHit.Y)
			LookAngleLine.Visible = true
		else
			LookAngleLine.Visible = false
		end
	else
		LookAngleLine.Visible = false
	end
	
	local Arrow = self.Components.ProximityArrow
	if ESP.ProximityArrows then
		local labelPos, OnScreen = WorldToViewportPoint(cam, humRp.Position)
		local distance = (humRp.Position - cam.CFrame.Position).Magnitude
		Arrow.Color = ESP.Color
		
		local cframe = cam.CFrame
		local flat = CFrame.fromMatrix(cframe.Position, cframe.RightVector, Vector3.yAxis)
		local objectSpace = CFrame.identity.PointToObjectSpace(flat, head.Position)
		local direction = Vector2.new(objectSpace.X, objectSpace.Z).Unit
		
		if not OnScreen and distance < ESP.ProximityMaxDistance then	
			local min2 = Vector2.zero.Min
			local max2 = Vector2.zero.Max
			
			Arrow.PointA = min2(max2(cam.ViewportSize * 0.5 + direction * 150, Vector2.one * 25), cam.ViewportSize - Vector2.one * 25)
			Arrow.PointB = Arrow.PointA - rotateVector(direction, 0.45) * 15
			Arrow.PointC = Arrow.PointA - rotateVector(direction, -0.45) * 15
			Arrow.Color = ESP.Color
			
			Arrow.Visible = true
		else
			Arrow.Visible = false
		end
	else
		Arrow.Visible = false
	end
end

function ESP:Add(obj, options)
	if not obj.Parent and not options.RenderInNil then
		return warn(obj, "has no parent")
	end

	local box = setmetatable({
		Name = options.Name or obj.Name,
		Type = "Box",
		Color = ESP.Color --[[or self:GetColor(obj)]],
		Size = options.Size or self.BoxSize,
		Object = obj,
		Player = options.Player or plrs:GetPlayerFromCharacter(obj),
		PrimaryPart = options.PrimaryPart or obj.ClassName == "Model" and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")) or obj:IsA("BasePart") and obj,
		Components = {},
		IsEnabled = options.IsEnabled,
		Temporary = options.Temporary,
		ColorDynamic = options.ColorDynamic,
		RenderInNil = options.RenderInNil
	}, boxBase)

	if self:GetBox(obj) then
		self:GetBox(obj):Remove()
	end
	
	box.Components["BoxesOutline"] = Draw("Square", {
		Thickness = 3,
		Color = box.Color,
		Transparency = 1,
		Filled = false,
		Visible = self.Enabled and self.Boxes
	})
	box.Components["Box"] = Draw("Square", {
		Thickness = 1,
		Color = box.Color,
		Transparency = 1,
		Filled = false,
		Visible = self.Enabled and self.Boxes
	})
	box.Components["Name"] = Draw("Text", {
		Text = box.Name,
		Color = box.Color,
		Center = true,
		Outline = true,
		Size = 19,
		Font = Enum.Font.Code,
		Visible = self.Enabled and self.Names
	})
	box.Components["Distance"] = Draw("Text", {
		Color = box.Color,
		Center = true,
		Outline = true,
		Size = 19,
		Font = Enum.Font.Code,
		Visible = self.Enabled and self.Distance
	})

	box.Components["Health"] = Draw("Text", {
		Color = box.Color,
		Center = true,
		Outline = true,
		Size = 19,
		Font = Enum.Font.Code,
		Visible = self.Enabled and self.Health
	})
	box.Components["Tracer"] = Draw("Line", {
		Thickness = ESP.Thickness,
		Color = box.Color,
		Transparency = 1,
		Visible = self.Enabled and self.Tracers
	})
	box.Components["LookAngle"] = Draw("Line", {
		Thickness = ESP.Thickness,
		Color = box.Color,
		Transparency = 1,
		Visible = self.Enabled and self.LookAngle
	})
	box.Components["HealthBarOutline"] = Draw("Square", {
		Thickness = 3,
		Color = Color3.new(0,0,0),
		Filled = false,
		Visible = self.Enabled and self.HealthBar
	})
	box.Components["HealthBar"] = Draw("Square", {
		Thickness = 1,
		Color = Color3.new(0, 1, 0),
		Filled = false,
		Visible = self.Enabled and self.HealthBar
	})
	box.Components["ProximityArrow"] = Draw("Triangle", {
		Thickness = 0,
		Color = box.Color,
		Filled = true,
		Visible = self.Enabled and self.LookAngle
	})

	self.Objects[obj] = box

	obj.AncestryChanged:Connect(function(_, parent)
		if parent == nil and ESP.AutoRemove ~= false then
			box:Remove()
		end
	end)
	obj:GetPropertyChangedSignal("Parent"):Connect(function()
		if obj.Parent == nil and ESP.AutoRemove ~= false then
			box:Remove()
		end
	end)

	local hum = obj:FindFirstChildOfClass("Humanoid")
	if hum then
		hum.Died:Connect(function()
			if ESP.AutoRemove ~= false then
				box:Remove()
			end
		end)
	end

	return box
end

local function CharAdded(char)
	local p = plrs:GetPlayerFromCharacter(char)
	if not char:FindFirstChild("HumanoidRootPart") then
		local ev
		ev = char.ChildAdded:Connect(function(c)
			if c.Name == "HumanoidRootPart" then
				ev:Disconnect()
				ESP:Add(char, {
					Name = p.Name,
					Player = p,
					PrimaryPart = c
				})
			end
		end)
	else
		ESP:Add(char, {
			Name = p.Name,
			Player = p,
			PrimaryPart = char.HumanoidRootPart
		})
	end
end
local function PlayerAdded(p)
	p.CharacterAdded:Connect(CharAdded)
	if p.Character then
		coroutine.wrap(CharAdded)(p.Character)
	end
end
plrs.PlayerAdded:Connect(PlayerAdded)
for i,v in pairs(plrs:GetPlayers()) do
	if v ~= plr then
		PlayerAdded(v)
	end
end

game:GetService("RunService").RenderStepped:Connect(function()
	cam = workspace.CurrentCamera
	for i,v in (ESP.Enabled and pairs or ipairs)(ESP.Objects) do
		if v.Update then
			local s,e = pcall(v.Update, v)
			if not s then warn("[EU]", e, v.Object:GetFullName()) end
		end
	end
end)

return ESP
